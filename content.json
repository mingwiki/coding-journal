{"pages":[{"title":"About","date":"2022-02-07T03:23:20.568Z","path":"about/index.html","text":""},{"title":"Categories","date":"2022-02-07T03:23:20.568Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2022-02-07T03:23:20.568Z","path":"tags/index.html","text":""}],"posts":[{"title":"学习Flexbox","date":"2022-01-04T05:28:00.000Z","path":"2022/01/04/2022-01-04-学习flexbox/","text":"Flexbox is a one-dimensional layout method for arranging items in rows or columns. Note: Flexbox layout is most appropriate to the components of an application, and small-scale layouts, while the Grid layout is intended for larger scale layouts. Flexbox Properties Properties for the Parent: (flex container) display 1display: flex; /* or inline-flex */ flex-direction 1flex-direction: row | row-reverse | column | column-reverse; flex-wrap 1flex-wrap: nowrap | wrap | wrap-reverse; flex-flow: This is a shorthand for the flex-direction and flex-wrap properties, which together define the flex container’s main and cross axes. The default value is row nowrap. 1flex-flow: column wrap; justify-content 1justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly | start | end | left | right ... + safe | unsafe; align-items 1align-items: stretch | flex-start | flex-end | center | baseline | first baseline | last baseline | start | end | self-start | self-end + ... safe | unsafe; align-content 1align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch | start | end | baseline | first baseline | last baseline + ... safe | unsafe; gap, row-gap, column-gap 1gap: 10px 20px; /* row-gap column gap */ Properties for the Children (flex items) order 1order: 5; /* default is 0 */ flex-grow 1flex-grow: 4; /* default 0 */ flex-shrink 1flex-shrink: 3; /* default 1 */ flex-basis 1flex-basis: | auto; /* default auto */ flex: This is the shorthand for flex-grow, flex-shrink and flex-basis combined. The second and third parameters (flex-shrink and flex-basis) are optional. The default is 0 1 auto, but if you set it with a single number value, like flex: 5;, that changes the flex-basis to 0%, so it’s like setting flex-grow: 5; flex-shrink: 1; flex-basis: 0%;. 1flex: none | [ &lt;&#x27;flex-grow&#x27;&gt; &lt;&#x27;flex-shrink&#x27;&gt;? || &lt;&#x27;flex-basis&#x27;&gt; ] align-self 1align-self: auto | flex-start | flex-end | center | baseline | stretch;","tags":[],"categories":[]},{"title":"请求与响应","date":"2022-01-04T05:28:00.000Z","path":"2022/01/04/2022-01-04-请求与响应/","text":"请求示例 1curl -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot; 请求的内容为 12345GET / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.54.0Accept: */*Frank: xxx 1curl -X POST -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot; 请求的内容为 12345POST / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.54.0Accept: */*Frank: xxx 1curl -X POST -d &quot;1234567890&quot; -s -v -H &quot;Frank: xxx&quot; -- &quot;https://www.baidu.com&quot; 请求的内容为 123456789POST / HTTP/1.1Host: www.baidu.comUser-Agent: curl/7.54.0Accept: */*Frank: xxxContent-Length: 10Content-Type: application/x-www-form-urlencoded1234567890 请求的格式 1234567891 动词路径协议/版本2 Key1: value12 Key2: value22 Key3: value32 Content-Type: application/x-www-form-urlencoded2 Host: www.baidu.com2 User-Agent: curl/7.54.03 4 要上传的数据 请求最多包含四部分，最少包含三部分。（也就是说第四部分可以为空） 第三部分永远都是一个回车（\\n） 动词有 GET POST PUT PATCH DELETE HEAD OPTIONS 等 这里的路径包括「查询参数」，但不包括「锚点」 如果你没有写路径，那么路径默认为 / 第 2 部分中的 Content-Type 标注了第 4 部分的格式 响应示例上面三个请求示例，前两个请求对应的响应分别为 1234567891011121314151617181920212223242526HTTP/1.1 200 OKAccept-Ranges: bytesCache-Control: private, no-cache, no-store, proxy-revalidate, no-transformConnection: Keep-AliveContent-Length: 2443Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:14:05 GMTEtag: &quot;5886041d-98b&quot;Last-Modified: Mon, 23 Jan 2017 13:24:45 GMTPragma: no-cacheServer: bfe/1.0.8.18Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt; 后面太长，省略了……HTTP/1.1 302 FoundConnection: Keep-AliveContent-Length: 17931Content-Type: text/htmlDate: Tue, 10 Oct 2017 09:19:47 GMTEtag: &quot;54d9749e-460b&quot;Server: bfe/1.0.8.18&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8&quot;&gt; 后面太长，省略了…… GET 请求和 POST 请求对应的响应可以一样，也可以不一样 响应的第四部分可以很长很长很长 响应的格式 123456789101112131415161 协议/版本号状态码状态解释2 Key1: value12 Key2: value22 Content-Length: 179312 Content-Type: text/html34 要下载的内容状态码要背，是服务器对浏览器说的话1xx 不常用2xx 表示成功3xx 表示滚吧4xx 表示你丫错了5xx 表示好吧，我错了状态解释没什么用第 2 部分中的 Content-Type 标注了第 4 部分的格式第 2 部分中的 Content-Type 遵循 MIME 规范","tags":[],"categories":[]},{"title":"CSS position","date":"2022-01-04T05:25:00.000Z","path":"2022/01/04/2022-01-04-css-position/","text":"fixed 和 absolute属性会被移除文档流，其他的不会。 使用position: fixed配合top/right/bottom/left可以用来做导航条。如果缩宽度，可以加with: 100% 外面加一个container。","tags":[],"categories":[]},{"title":"The Shapes of CSS","date":"2022-01-04T05:25:00.000Z","path":"2022/01/04/2022-01-04-the-shapes-of-css/","text":"Square Shape 12345#square &#123; width: 100px; height: 100px; background: red;&#125; Rectangle Shape 12345#rectangle &#123; width: 200px; height: 100px; background: red;&#125; Circle Shape 123456#circle &#123; width: 100px; height: 100px; background: red; border-radius: 50%&#125; Oval Shape 123456#oval &#123; width: 200px; height: 100px; background: red; border-radius: 100px / 50px;&#125; Triangle Up Shape 1234567#triangle-up &#123; width: 0; height: 0; border-left: 50px solid transparent; border-right: 50px solid transparent; border-bottom: 100px solid red;&#125; Triangle Top Left Shape 123456#triangle-topleft &#123; width: 0; height: 0; border-top: 100px solid red; border-right: 100px solid transparent;&#125;","tags":[],"categories":[]}],"categories":[],"tags":[]}